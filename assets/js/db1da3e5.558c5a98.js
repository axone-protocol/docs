"use strict";(self.webpackChunk_axone_docs=self.webpackChunk_axone_docs||[]).push([[49264],{87030:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>u});var s=n(85893),r=n(11151);const o={},a=void 0,d={id:"axoned_query_auth_address-bytes-to-string",title:"axoned_query_auth_address-bytes-to-string",description:"axoned query auth address-bytes-to-string",source:"@site/commands/axoned_query_auth_address-bytes-to-string.md",sourceDirName:".",slug:"/axoned_query_auth_address-bytes-to-string",permalink:"/commands/next/axoned_query_auth_address-bytes-to-string",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"axoned_query_auth_address-by-acc-num",permalink:"/commands/next/axoned_query_auth_address-by-acc-num"},next:{title:"axoned_query_auth_address-string-to-bytes",permalink:"/commands/next/axoned_query_auth_address-string-to-bytes"}},i={},u=[{value:"axoned query auth address-bytes-to-string",id:"axoned-query-auth-address-bytes-to-string",level:2},{value:"Options",id:"options",level:3},{value:"SEE ALSO",id:"see-also",level:3}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"axoned-query-auth-address-bytes-to-string",children:"axoned query auth address-bytes-to-string"}),"\n",(0,s.jsx)(t.p,{children:"Transform an address bytes to string"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"axoned query auth address-bytes-to-string [address-bytes] [flags]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"options",children:"Options"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'      --grpc-addr string   the gRPC endpoint to use for this chain\n      --grpc-insecure      allow gRPC over insecure channels, if not the server must use TLS\n      --height int         Use a specific height to query state at (this can error if the node is pruning state)\n  -h, --help               help for address-bytes-to-string\n      --no-indent          Do not indent JSON output\n      --node string        <host>:<port> to CometBFT RPC interface for this chain (default "tcp://localhost:26657")\n  -o, --output string      Output format (text|json) (default "text")\n'})}),"\n",(0,s.jsx)(t.h3,{id:"see-also",children:"SEE ALSO"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"/commands/next/axoned_query_auth",children:"axoned query auth"}),"\t - Querying commands for the auth module"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>d,a:()=>a});var s=n(67294);const r={},o=s.createContext(r);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);