"use strict";(self.webpackChunk_axone_docs=self.webpackChunk_axone_docs||[]).push([[75689],{65063:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var t=i(85893),r=i(11151);const s={},a=void 0,d={id:"okp4d_credential_sign",title:"okp4d_credential_sign",description:"okp4d credential sign",source:"@site/commands/okp4d_credential_sign.md",sourceDirName:".",slug:"/okp4d_credential_sign",permalink:"/commands/next/okp4d_credential_sign",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"okp4d_credential",permalink:"/commands/next/okp4d_credential"},next:{title:"okp4d_debug",permalink:"/commands/next/okp4d_debug"}},o={},l=[{value:"okp4d credential sign",id:"okp4d-credential-sign",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Options",id:"options",level:3},{value:"SEE ALSO",id:"see-also",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"okp4d-credential-sign",children:"okp4d credential sign"}),"\n",(0,t.jsx)(n.p,{children:"Sign a W3C Verifiable Credential provided as a file or stdin"}),"\n",(0,t.jsx)(n.h3,{id:"synopsis",children:"Synopsis"}),"\n",(0,t.jsx)(n.p,{children:"Sign a W3C Verifiable Credential;"}),"\n",(0,t.jsx)(n.p,{children:"It will read a verifiable credential from a file (or stdin), sign it, and print the JSON-LD signed credential to stdout."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"okp4d credential sign [file] [flags]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"      --date string              Date of the signature provided in RFC3339 format. If not provided, current time will be used\n      --from string              Name or address of private key with which to sign\n  -h, --help                     help for sign\n      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default \"test\")\n      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used\n      --overwrite                Overwrite existing signatures with a new one. If disabled, new signature will be appended\n      --schema-map strings       Map original URIs to alternative URIs for resolving JSON-LD schemas. Useful for redirecting network-based URIs to local filesystem paths or other URIs. Each mapping should be in the format 'originalURI=alternativeURI'. Multiple mappings can be provided by repeating the flag. Example usage: --schema-map originalURI1=alternativeURI1 --schema-map originalURI2=alternativeURI2\n"})}),"\n",(0,t.jsx)(n.h3,{id:"see-also",children:"SEE ALSO"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/commands/next/okp4d_credential",children:"okp4d credential"}),"\t - W3C Verifiable Credential"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>a});var t=i(67294);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);