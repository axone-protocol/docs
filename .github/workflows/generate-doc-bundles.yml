name: üì¶ Generate Documentation Bundles

on:
  workflow_call:

  workflow_dispatch:

concurrency:
  group: generate-doc-bundles-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-doc-bundles:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        bundles:
          - name: "whitepaper-tech-faq"
            sources:
              - "docs/whitepaper/**/*.md"
              - "docs/architecture/**/*.md"
              - "docs/faq/**/*.md"
          - name: "tutorial-validator"
            sources:
              - "docs/tutorials/**/*.md"
              - "docs/nodes/**/*.md"
          - name: "tutorial"
            sources:
              - "docs/tutorials/keplr-1.mdx"
              - "docs/tutorials/cli-1.mdx"
    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Dependencies
        run: |
          pip install python-frontmatter
          pip install justext

      - name: Generate Documentation Bundle
        shell: python
        env:
          SOURCES: ${{ toJSON(matrix.bundles.sources) }}
          BUNDLE: ${{ matrix.bundles.name }}
        run: |
          import os
          import glob
          import json
          import frontmatter
          import justext

          sources = json.loads(os.environ['SOURCES'])
          output_filename = f"{os.environ['BUNDLE']}-bundle.md"

          print(f"‚ö°Ô∏è Generating {output_filename}")
          with open(output_filename, "a") as output_file:
              for source in sources:
                  print(f"üîé looking for {source}")
                  files = glob.glob(source, recursive=True)

                  for file_path in files:
                      print(f"üîÅ merging {file_path}")
                      with open(file_path, "r") as input_file:
                          _, content = frontmatter.parse(input_file.read())

                          paragraphs = justext.justext(content, justext.get_stoplist("English"))
                          for paragraph in paragraphs:
                              output_file.write(paragraph.text)
                              output_file.write("\n")
                          output_file.write("\n")

          print(f"üì¶ bundle {output_filename} generated")

      - name: Upload Documentation Bundle as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.bundles.name }}-bundle
          path: ${{ matrix.bundles.name }}-bundle.md
