"use strict";(self.webpackChunk_axone_docs=self.webpackChunk_axone_docs||[]).push([[33790],{36616:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var t=i(85893),s=i(11151);const r={sidebar_position:13},a="eddsa_verify/4",d={id:"eddsa_verify_4",title:"eddsa_verify_4",description:"[//]: # (This file is auto-generated. Please do not modify it yourself.)",source:"@site/predicates/eddsa_verify_4.md",sourceDirName:".",slug:"/eddsa_verify_4",permalink:"/fr/predicates/next/eddsa_verify_4",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13},sidebar:"defaultSidebar",previous:{title:"ecdsa_verify_4",permalink:"/fr/predicates/next/ecdsa_verify_4"},next:{title:"hex_bytes_2",permalink:"/fr/predicates/next/hex_bytes_2"}},o={},c=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"eddsa_verify4",children:"eddsa_verify/4"}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"eddsa_verify/4"})," determines if a given signature is valid as per the EdDSA algorithm for the provided data, using the specified public key."]}),"\n",(0,t.jsx)(n.p,{children:"The signature is as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"eddsa_verify(+PubKey, +Data, +Signature, +Options) is semi-det\n"})}),"\n",(0,t.jsx)(n.p,{children:"Where:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"PubKey is the encoded public key as a list of bytes."}),"\n",(0,t.jsx)(n.li,{children:"Data is the message to verify, represented as either a hexadecimal atom or a list of bytes. It's important that the message isn't pre-hashed since the Ed25519 algorithm processes messages in two passes when signing."}),"\n",(0,t.jsx)(n.li,{children:"Signature represents the signature corresponding to the data, provided as a list of bytes."}),"\n",(0,t.jsx)(n.li,{children:"Options are additional configurations for the verification process. Supported options include: encoding(+Format) which specifies the encoding used for the Data, and type(+Alg) which chooses the algorithm within the EdDSA family (see below for details)."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For Format, the supported encodings are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"hex (default), the hexadecimal encoding represented as an atom."}),"\n",(0,t.jsx)(n.li,{children:"octet, the plain byte encoding depicted as a list of integers ranging from 0 to 255."}),"\n",(0,t.jsx)(n.li,{children:"text, the plain text encoding represented as an atom."}),"\n",(0,t.jsx)(n.li,{children:"utf8 (default), the UTF-8 encoding represented as an atom."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For Alg, the supported algorithms are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ed25519 (default): The EdDSA signature scheme using SHA-512 (SHA-2) and Curve25519."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"# Verify a signature for a given hexadecimal data.\n- eddsa_verify([127, ...], '9b038f8ef6918cbb56040dfda401b56b...', [23, 56, ...], [encoding(hex), type(ed25519)])\n\n# Verify a signature for binary data.\n- eddsa_verify([127, ...], [56, 90, ..], [23, 56, ...], [encoding(octet), type(ed25519)])\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>a});var t=i(67294);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);